// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ThSUMaterialData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ThSUMaterialData.proto</summary>
public static partial class ThSUMaterialDataReflection {

  #region Descriptor
  /// <summary>File descriptor for ThSUMaterialData.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ThSUMaterialDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChZUaFNVTWF0ZXJpYWxEYXRhLnByb3RvIq4BChBUaFNVTWF0ZXJpYWxEYXRh",
          "EhUKDW1hdGVyaWFsX25hbWUYASABKAkSDQoFYWxwaGEYAiABKAUSDgoGaGFz",
          "UkdCGAMgASgIEhQKB2NvbG9yX3IYBCABKAVIAIgBARIUCgdjb2xvcl9nGAUg",
          "ASgFSAGIAQESFAoHY29sb3JfYhgGIAEoBUgCiAEBQgoKCF9jb2xvcl9yQgoK",
          "CF9jb2xvcl9nQgoKCF9jb2xvcl9iYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ThSUMaterialData), global::ThSUMaterialData.Parser, new[]{ "MaterialName", "Alpha", "HasRGB", "ColorR", "ColorG", "ColorB" }, new[]{ "ColorR", "ColorG", "ColorB" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ThSUMaterialData : pb::IMessage<ThSUMaterialData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ThSUMaterialData> _parser = new pb::MessageParser<ThSUMaterialData>(() => new ThSUMaterialData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ThSUMaterialData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ThSUMaterialDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ThSUMaterialData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ThSUMaterialData(ThSUMaterialData other) : this() {
    _hasBits0 = other._hasBits0;
    materialName_ = other.materialName_;
    alpha_ = other.alpha_;
    hasRGB_ = other.hasRGB_;
    colorR_ = other.colorR_;
    colorG_ = other.colorG_;
    colorB_ = other.colorB_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ThSUMaterialData Clone() {
    return new ThSUMaterialData(this);
  }

  /// <summary>Field number for the "material_name" field.</summary>
  public const int MaterialNameFieldNumber = 1;
  private string materialName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MaterialName {
    get { return materialName_; }
    set {
      materialName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "alpha" field.</summary>
  public const int AlphaFieldNumber = 2;
  private int alpha_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Alpha {
    get { return alpha_; }
    set {
      alpha_ = value;
    }
  }

  /// <summary>Field number for the "hasRGB" field.</summary>
  public const int HasRGBFieldNumber = 3;
  private bool hasRGB_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRGB {
    get { return hasRGB_; }
    set {
      hasRGB_ = value;
    }
  }

  /// <summary>Field number for the "color_r" field.</summary>
  public const int ColorRFieldNumber = 4;
  private int colorR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ColorR {
    get { if ((_hasBits0 & 1) != 0) { return colorR_; } else { return 0; } }
    set {
      _hasBits0 |= 1;
      colorR_ = value;
    }
  }
  /// <summary>Gets whether the "color_r" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasColorR {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "color_r" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearColorR() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "color_g" field.</summary>
  public const int ColorGFieldNumber = 5;
  private int colorG_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ColorG {
    get { if ((_hasBits0 & 2) != 0) { return colorG_; } else { return 0; } }
    set {
      _hasBits0 |= 2;
      colorG_ = value;
    }
  }
  /// <summary>Gets whether the "color_g" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasColorG {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "color_g" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearColorG() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "color_b" field.</summary>
  public const int ColorBFieldNumber = 6;
  private int colorB_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ColorB {
    get { if ((_hasBits0 & 4) != 0) { return colorB_; } else { return 0; } }
    set {
      _hasBits0 |= 4;
      colorB_ = value;
    }
  }
  /// <summary>Gets whether the "color_b" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasColorB {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "color_b" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearColorB() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ThSUMaterialData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ThSUMaterialData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MaterialName != other.MaterialName) return false;
    if (Alpha != other.Alpha) return false;
    if (HasRGB != other.HasRGB) return false;
    if (ColorR != other.ColorR) return false;
    if (ColorG != other.ColorG) return false;
    if (ColorB != other.ColorB) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (MaterialName.Length != 0) hash ^= MaterialName.GetHashCode();
    if (Alpha != 0) hash ^= Alpha.GetHashCode();
    if (HasRGB != false) hash ^= HasRGB.GetHashCode();
    if (HasColorR) hash ^= ColorR.GetHashCode();
    if (HasColorG) hash ^= ColorG.GetHashCode();
    if (HasColorB) hash ^= ColorB.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (MaterialName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(MaterialName);
    }
    if (Alpha != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Alpha);
    }
    if (HasRGB != false) {
      output.WriteRawTag(24);
      output.WriteBool(HasRGB);
    }
    if (HasColorR) {
      output.WriteRawTag(32);
      output.WriteInt32(ColorR);
    }
    if (HasColorG) {
      output.WriteRawTag(40);
      output.WriteInt32(ColorG);
    }
    if (HasColorB) {
      output.WriteRawTag(48);
      output.WriteInt32(ColorB);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (MaterialName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(MaterialName);
    }
    if (Alpha != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Alpha);
    }
    if (HasRGB != false) {
      output.WriteRawTag(24);
      output.WriteBool(HasRGB);
    }
    if (HasColorR) {
      output.WriteRawTag(32);
      output.WriteInt32(ColorR);
    }
    if (HasColorG) {
      output.WriteRawTag(40);
      output.WriteInt32(ColorG);
    }
    if (HasColorB) {
      output.WriteRawTag(48);
      output.WriteInt32(ColorB);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (MaterialName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MaterialName);
    }
    if (Alpha != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alpha);
    }
    if (HasRGB != false) {
      size += 1 + 1;
    }
    if (HasColorR) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorR);
    }
    if (HasColorG) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorG);
    }
    if (HasColorB) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorB);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ThSUMaterialData other) {
    if (other == null) {
      return;
    }
    if (other.MaterialName.Length != 0) {
      MaterialName = other.MaterialName;
    }
    if (other.Alpha != 0) {
      Alpha = other.Alpha;
    }
    if (other.HasRGB != false) {
      HasRGB = other.HasRGB;
    }
    if (other.HasColorR) {
      ColorR = other.ColorR;
    }
    if (other.HasColorG) {
      ColorG = other.ColorG;
    }
    if (other.HasColorB) {
      ColorB = other.ColorB;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MaterialName = input.ReadString();
          break;
        }
        case 16: {
          Alpha = input.ReadInt32();
          break;
        }
        case 24: {
          HasRGB = input.ReadBool();
          break;
        }
        case 32: {
          ColorR = input.ReadInt32();
          break;
        }
        case 40: {
          ColorG = input.ReadInt32();
          break;
        }
        case 48: {
          ColorB = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          MaterialName = input.ReadString();
          break;
        }
        case 16: {
          Alpha = input.ReadInt32();
          break;
        }
        case 24: {
          HasRGB = input.ReadBool();
          break;
        }
        case 32: {
          ColorR = input.ReadInt32();
          break;
        }
        case 40: {
          ColorG = input.ReadInt32();
          break;
        }
        case 48: {
          ColorB = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
